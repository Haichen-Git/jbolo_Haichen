version: {date: 20211210, name: 'Example_experiment'}
config:
  dnu: 0.1 # GHz frequency resolution for integrals
sources:
  cmb: {source_type: blackbody, T: 2.726, emiss: 1.0}
  # dust: {source_type: greybody, amplitude: 1e-5, scale_frequency: 353.0, scale_temperature: 19.7}
  # synchrotron:  {source_type: powerlaw, spectral_index: -3.0, amplitude: 1e-10, scale_frequency: 30.0}
  atmosphere:
    # This shows how to do it with the bolo-calc hdf5 file.
    source_type: hdf5  #
    file: 'atmos/atm_20201217.hdf5'   # put the correct location here, relative to where you're running jbolo from
    site: 'Atacama' #Pole
    pwv: 993      # microns, from 0 to 8000
    elevation: 40  # degrees, integer from 1 to 90
    # Add custom file later, perhaps bespoke arrays.
    #
optics_defaults: {temperature: 273.0, reflection: 0.0, scatter_frac: 0.0, spillover: 0.0, absorption: 0.0}
optical_elements:
  # requires python 3.7 or later, because we assume dict{} is ordered.
  # This list of elements starts with the one closest to the sky, and moves toward the detector.
  #
  # obj_type = 'Mirror' tell the code to use the conductivity and surface roughness to calculate loss.
  primary:      {obj_type: Mirror, conductivity: 36.9E6, surface_rough: 4.0E-6, spillover: 0.004}  # spill = gaps here.
  # JJM says < 1% spill based on their measurements
  secondary:    {obj_type: Mirror, conductivity: 36.9E6, surface_rough: 4.0E-6, spillover: 0.024}  # spill is 2% spill, 0.4% gaps
  #
  # obj_type = 'LossTangent' says to use the dielectric loss tangent formula to calculate absorption
  window:       {obj_type: LossTangent, reflection: 0.01, thickness: 0.00475, index: 1.525, loss_tangent: 3.0E-4}
  #
  # obj_typ = 'Bespoke' says the absorption will be given by a value (for all frequencies) or a list (one element for each freq).
  RTMLI_10 :    {obj_type: Bespoke,    temperature: 150.0, absorption: [0.00399, 0.00399, 0.00399, 0.00399, 0.00435, 0.0083 ]}  # 10 layers
  alumina_filt: {obj_type: LossTangent, temperature: 50.0, reflection: 0.02, thickness: 0.01, index: 3.1, loss_tangent: 3.0E-4}
  nylon_filt:   {obj_type: Bespoke,     temperature:  4.0, reflection: 0.01, absorption: [0.0003, 0.0007, 0.0068, 0.0237, 0.0698, 0.123 ]}
  fieldlens:    {obj_type: LossTangent, temperature: 4.0,  reflection: 0.006, thickness: 0.01, index: 3.41, loss_tangent: 0.5E-4}
  colimlens:    {obj_type: LossTangent, temperature: 4.0,  reflection: 0.006, thickness: 0.01, index: 3.41, loss_tangent: 0.5E-4}
  lowpass:      {obj_type: Bespoke,     temperature: 1.0,  absorption: 0.01, reflection: 0.05}
  #
  # obj_type = 'ApertureStop' invokes a spillover calculation, using the f/# and a gaussian beam calculated from the horn diam
  # and frequency.  Apologies but currently this element must be called 'lyot'.
  lyot:         {obj_type: ApertureStop, temperature: 1.0}
  objlens:      {obj_type: LossTangent, temperature: 1.0,  reflection: 0.006, thickness: 0.01, index: 3.41, loss_tangent: 0.5E-4}
bolo_config:
  # For aperture stop calcs
  waist_factor: 3.0
  f_number: 1.9
  #
  N_polarizations: 1
  #
  # For single-mode or N-mode bolometers, set  it up this way.  Eventually I'll hopefully add functionality allowing a fixed
  # throughput value at all frequencies, eg for a Winston cone.
  AOmega_method: ModeCount   # or "Fixed"
  N_modes: 1  # required if method == "ModeCount"
  #
  psat_method: specified # or "from_optical_power", in which case psat = P_optical * psat_factor
  psat_factor: None  # must a number if psat_method is "from_optical_power"
  #
  beta: 2.7   # this is beta = n-1. bolo-calc called it "carrier index". Note that G_dynamic is found from psat, T_c, and carrier_index
  #
  # loop gain
  #loopgain_method: 'infinite'
  #loopgain_method: 'from_alpha'  # alpha value given per channel below
  loopgain_method: 'specified'  # loopgain value given per channel below
  #
  T_bath: 0.1  # Kelvin
  T_c: 0.16    # Kelvin
  R_bolo: 0.008   # as biased in operation, ie less than R_normal.
  R_shunt: 0.0004 # used in Johnson noise calc only.
  yield: 0.8   # for conversion from NET_1detector to NET_wafer
readout:
  #method: 'fraction'  #in anticipation of getting NEI number/formula eventually. The fraction is specified below, channel-by-channel.
  method: 'from_NEI'  # Uses NEI and calculated responsivity to get NEP.
channels:
  LF_1:
    chnum: 0  # This sets the order of lists in optical elements, must start at zero and increment from there.
    #band_center:  25.75  # not used
    read_frac: 0.05 # only used if needed
    loopgain: 1000  # only used if needed
    alpha: 100      # only used if needed
    readout_NEI: 40.e-12 #amps/rtHz, only used if needed
    #
    # There are several methods of setting the band response.
    # In all of these, make sure your limits of integration (above) are set appropriately outside
    # the curve of whatever you're using to shape the band.
    nu_low: 21.50        # limit of integration
    nu_high: 30.00       # limit of integration
    #
    # In my opinion this is the best way of setting a flat band, because it works even if you've
    # been playing with band files or logistic things/etc which require the integration limits to be broadened.
    band_response : {method: flat, nu_lowedge: 21.50, nu_highedge: 30.00}
    #
    # Read from band file
    # Ma
    #band_response : {method: bandfile, fname : band0.txt }
    #
    # To use the next method (bandvector), you must arrange for the band-defining response vector
    # to be in the correct place before run_optics is called.  The correct places are:
    # sim['channels']['LF_1']['band_response']['nuband_in']  # frequencies band is specified at
    # sim['channels']['LF_1']['band_response']['band_in']    # detector band response at those frequencies
    #band_response : {method: bandvector}
    #
    # The next method uses a logistic function to shape the band.
    # Make sure limits of integration (above) are set reasonably outside your 50% edge points.
    #band_response : {method: logistic, nu_lowedge: 21.50, nu_highedge: 30.00, a: 0.7, n: 2.0}
    #
    det_eff: 0.63
    psat: 0.75e-12  # see psat_method above.
    horn_diameter: 16.1e-3   # meters
    pixel_spacing: 16.1e-3
    num_det_per_wafer: 96
  LF_2:
    chnum: 1  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  38.75  # not used
    nu_low: 29.99        # limits of integration.
    nu_high: 47.51
    nu_low_50: 29.99     # 50% power point for flat band, or for logistic model.
    nu_high_50: 47.51
    read_frac: 0.05
    loopgain: 1000  # only used if needed
    alpha: 100      # only used if needed
    readout_NEI: 40.e-12 #amps/rtHz, only used if needed
    band_response : {method: flat}  # This works, but requires the limits of integration to be the band edges.
    #band_response : {method: bandfile, fname : band1.txt }
    det_eff: 0.65
    psat: 4.18e-12  # see psat_method above.
    horn_diameter: 16.1e-3   # meters
    pixel_spacing: 16.1e-3
    num_det_per_wafer: 96
  MF_1:
    chnum: 2  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  91.5  # not used
    nu_low: 77.0        # limits of integration.
    nu_high: 106.0
    read_frac: 0.05
    loopgain: 1000  # only used if needed
    alpha: 100      # only used if needed
    readout_NEI: 40.e-12 #amps/rtHz, only used if needed
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : band2.txt }
    det_eff: 0.65
    psat: 4.60e-12  # see psat_method above.
    horn_diameter: 5.3e-3   # meters
    pixel_spacing: 5.3e-3
    num_det_per_wafer: 864
  MF_2:
    chnum: 3  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  148.5  # not used
    nu_low: 128.0        # limits of integration.
    nu_high: 169.0
    read_frac: 0.05
    loopgain: 1000  # only used if needed
    alpha: 100      # only used if needed
    readout_NEI: 40.e-12 #amps/rtHz, only used if needed
    band_response : {method: flat}
    #band_response : {method: bandfile, fname : band3.txt }
    det_eff: 0.68
    psat: 12.51e-12  # see psat_method above.
    horn_diameter: 5.3e-3   # meters
    pixel_spacing: 5.3e-3
    num_det_per_wafer: 864
  HF_1:
    chnum: 4  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  227.0  # not used
    nu_low: 150.0        # These set the low and high limits of integration.
    nu_high: 300.0
    read_frac: 0.05
    loopgain: 1000  # only used if needed
    alpha: 100      # only used if needed
    readout_NEI: 40.e-12 #amps/rtHz, only used if needed
    #band_response : {method: flat,     nu_lowedge: 197.94, nu_highedge: 256.06}
    band_response : {method: logistic, nu_lowedge: 197.94, nu_highedge: 256.06, a: 2.0, n: 0.7}  # set a=10 for quite-square band.
    #band_response : {method: bandfile, fname : band4.txt }
    det_eff: 0.67
    psat: 31.70e-12  # see psat_method above.
    horn_diameter: 5.2e-3   # meters
    pixel_spacing: 5.2e-3
    num_det_per_wafer: 938
  HF_2:
    chnum: 5  # This sets the order of lists in optical elements, must start at zero and increment from there.
    band_center:  285.5  # not used
    nu_low: 255.95        # limits of integration.
    nu_high: 315.05
    read_frac: 0.05
    loopgain: 1000  # only used if needed
    alpha: 100      # only used if needed
    readout_NEI: 40.e-12 #amps/rtHz, only used if needed
    band_response : {method: flat, nu_lowedge: 255.95, nu_highedge: 315.05}
    #band_response : {method: bandfile, fname : band5.txt }
    det_eff: 0.66
    psat: 42.43e-12  # see psat_method above.
    horn_diameter: 5.2e-3   # meters
    pixel_spacing: 5.2e-3
    num_det_per_wafer: 938
